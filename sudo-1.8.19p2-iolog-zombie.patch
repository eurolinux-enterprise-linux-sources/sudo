diff -up sudo-1.8.19p2/src/exec.c.iolog-zombie sudo-1.8.19p2/src/exec.c
--- sudo-1.8.19p2/src/exec.c.iolog-zombie	2018-05-28 09:01:13.488647060 +0200
+++ sudo-1.8.19p2/src/exec.c	2018-05-28 09:01:13.526646940 +0200
@@ -534,7 +534,7 @@ sudo_execute(struct command_details *det
 
     if (log_io) {
 	/* Flush any remaining output and free pty-related memory. */
-	pty_close(cstat);
+	pty_close(ec.evbase,cstat);
    }
 
 #ifdef HAVE_SELINUX
diff -up sudo-1.8.19p2/src/exec_pty.c.iolog-zombie sudo-1.8.19p2/src/exec_pty.c
--- sudo-1.8.19p2/src/exec_pty.c.iolog-zombie	2018-05-28 09:01:13.518646965 +0200
+++ sudo-1.8.19p2/src/exec_pty.c	2018-05-28 09:01:13.527646937 +0200
@@ -919,12 +919,19 @@ fork_pty(struct command_details *details
 }
 
 void
-pty_close(struct command_status *cstat)
+pty_close(struct sudo_event_base *evbase, struct command_status *cstat)
 {
     struct io_buffer *iob;
     int n;
     debug_decl(pty_close, SUDO_DEBUG_EXEC);
 
+    /* Close the pty slave first so reads from the master don't block. */
+    if (io_fds[SFD_SLAVE] != -1) {
+	    ev_free_by_fd(evbase, io_fds[SFD_SLAVE]);
+	    close(io_fds[SFD_SLAVE]);
+	    io_fds[SFD_SLAVE] = -1;
+    }
+
     /* Flush any remaining output (the plugin already got it). */
     if (io_fds[SFD_USERTTY] != -1) {
 	n = fcntl(io_fds[SFD_USERTTY], F_GETFL, 0);
@@ -965,6 +972,11 @@ pty_close(struct command_status *cstat)
 	}
     }
     utmp_logout(slavename, cstat->type == CMD_WSTATUS ? cstat->val : 0); /* XXX - only if CD_SET_UTMP */
+
+    /* Close pty master. */
+    if (io_fds[SFD_MASTER] != -1)
+	    close(io_fds[SFD_MASTER]);
+	
     debug_return;
 }
 
diff -up sudo-1.8.19p2/src/sudo_exec.h.iolog-zombie sudo-1.8.19p2/src/sudo_exec.h
--- sudo-1.8.19p2/src/sudo_exec.h.iolog-zombie	2017-01-14 05:30:15.000000000 +0100
+++ sudo-1.8.19p2/src/sudo_exec.h	2018-05-28 09:01:13.527646937 +0200
@@ -93,7 +93,7 @@ void handler(int s, siginfo_t *info, voi
 #else
 void handler(int s);
 #endif
-void pty_close(struct command_status *cstat);
+void pty_close(struct sudo_event_base *evbase, struct command_status *cstat);
 void pty_setup(uid_t uid, const char *tty, const char *utmp_user);
 void terminate_command(pid_t pid, bool use_pgrp);
 
